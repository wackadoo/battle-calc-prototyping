%html
	%head 
		%title Kampfulator
		%script{:type => "text/javascript", :language => "JavaScript", :src => "jquery-1.7.2.min.js"}
		%style{:type => "text/css"}
			:plain
				table, tr, td, th {
					border: 1px solid black;
					border-collapse: collapse;
					padding: 2px 6px;
					vertical-align: top;
				}
				.closed {
					display: none;
				}
	%body
		%h1 Kampfulator: 
		%form{ :action => "", :method => "post"}
			- (0...@units.length).each do |fi|
				%h2= "Faction "+fi.to_s
				Number of armies:
				%input{ :type => "text", :name => "units[num_armies][#{fi}]", :value => @units[fi].size }
				- (0...@units[fi].length).each do |ai|
					%h3= "Army "+ai.to_s
					%table
						- @units[fi][ai].each do |k, v|
							%tr
								%td= get_type_name(k)
								%td
									%input{ :type => "text", :name => "units[#{fi}][#{ai}][#{k}][numUnitsAtStart]", :value => @units[fi][ai][k].numUnitsAtStart }
									%a{ :href => "#", :class => "unit_details_a"} Details
									.unit_details{ :class => "closed"}
										%table
											%tr
												%td base damage
												%td 
													%input{ :type => "text", :name => "units[#{fi}][#{ai}][#{k}][baseDamage]", :value => @units[fi][ai][k].baseDamage }
											%tr
												%td critical damage
												%td 
													%input{ :type => "text", :name => "units[#{fi}][#{ai}][#{k}][criticalDamage]", :value => @units[fi][ai][k].criticalDamage }
											%tr
												%td critical probability
												%td 
													%input{ :type => "text", :name => "units[#{fi}][#{ai}][#{k}][criticalProbability]", :value => @units[fi][ai][k].criticalProbability }
											%tr
												%td initiative
												%td 
													%input{ :type => "text", :name => "units[#{fi}][#{ai}][#{k}][initiative]", :value => @units[fi][ai][k].initiative }
													%tr
												%td effectiveness
												%td 
													%table
														- @rules.unit_categories.each do |c|
															%tr
																%td= c[:name][:en_US]
																%td
																	%input{ :type => "text", :name => "units[#{fi}][#{ai}][#{k}][effectiveness][#{c[:id]}]", :value => @units[fi][ai][k].getEffectivenessFor(c[:id]) }
											%tr
												%td hitpoints
												%td 
													%input{ :type => "text", :name => "units[#{fi}][#{ai}][#{k}][hitpoints]", :value => @units[fi][ai][k].hitpoints }
											%tr
												%td armor
												%td 
													%input{ :type => "text", :name => "units[#{fi}][#{ai}][#{k}][armor]", :value => @units[fi][ai][k].armor }
			%br
			%br
			%table
				%tr
					%td Anzahl Kampfrunden:
					%td 
						%input{ :type => "text", :name => "num_rounds", :value => @num_rounds }

			%br
			%input{ :type => "submit", :value => "Fight"}
			%script
				:plain
					$(".unit_details_a").click(function () {
						if ($(this).parent().find(".unit_details").hasClass('closed')) {
							$(this).parent().find(".unit_details").removeClass('closed');
						} else {
							$(this).parent().find(".unit_details").addClass('closed');
						}
					});
		%h1 Kampfbericht
		- (0...@rounds.length).each do |ri|
			%hr
			%h2= "Round "+ri.to_s
			- round = @rounds[ri]
			- (0...round.numFactions).each do |fi|
				%h3= "Faction "+fi.to_s
				- faction = round.getFaction(fi)
				- (0...faction.numArmies).each do |ai|
					- army = faction.getArmy(ai)
					%h4= "Army "+ai.to_s
					%table
						%tr
							%td 
								%b Name
							%td 
								%b #Units - #Deaths
							%td 
								%b #Hits
							%td 
								%b #Kills
							%td 
								%b +XP
							%td 
								%b dmg taken
							%td 
								%b dmg inflicted
							%td
								%b dmg log
						- (0...army.numUnits).each do |ui|
							- unit = army.getUnit(ui)
							- if (unit.numUnitsAtStart > 0)
								%tr
									%td= get_type_name(unit.unitTypeId)
									%td= unit.numUnitsAtStart.to_s+" - "+unit.numDeaths.to_s
									%td= unit.numHits
									%td= unit.numKills
									%td= unit.newXp
									%td= unit.damageTaken
									%td= unit.damageInflicted
									%td
										%table
											%tr
												%td
													%b target id
												%td
													%b target category id
												%td
													%b effectiveness
												%td
													%b overkill
												%td
													%b superority bonus
												%td
													%b rest probability
												%td
													%b rest success
											- (0...unit.numDamageLogs).each do |li|
												- (0...unit.numSubDamageLogs(li)).each do |sli|
													- damageLog = unit.getDamageLog(li, sli)
													%tr
														%td= get_type_name(damageLog.targetId)
														%td= get_category_name(damageLog.targetUnitCategoryId)
														%td= damageLog.effectiveness
														%td= damageLog.overkill
														%td= damageLog.superorityBonus
														%td= damageLog.restProbability
														%td= damageLog.experimentSuccess
												%tr
													%td
													%td
													%td
													%td
													%td
													%td
													%td

				- (0...faction.testResultsSize()).each do |ri|
					- test_result = faction.getTestResult(ri)
					- if test_result.testType != "NoTest"
						%br
						%b= test_result.testType
						%table
							%tr
								%td 
									%b passed
								%td= test_result.passed
							%tr
								%td 
									%b debug text
								%td= test_result.debugText
						%br
									